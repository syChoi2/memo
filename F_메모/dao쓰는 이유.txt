dao 쓰는 이유

컨트롤러 영역, 비지니스 영역(서비스, 혹은 로직 특화), DAO 영역 (DB에 중점) 으로 나누는 이유는 OOP의 디자인 원칙, 복잡성을 고려한 추상, 로직의 분리, 테스트 단위 고려 등등의 원칙 때문에 나뉜거라고 봅니다.

모델1 기반의 불편함으로 좀더 발전된 모델2가 나왔고 그중 MVC가 표준이라고 봐도 무방할 정도의 아키텍쳐 패턴이 되었죠.

또, OO적인 방식의 프로그램 (High Cohesion, Loose Coupling) 을 표현하고자 Layered한 방식의 구조로 자리잡게 된 거라고 보니다.

이러한 분리가 결과적으로 유지보수, 확장성과 같은 부분을 고려할 때 가장 적합하기에 추구하는것이지 그것이 모든 WebApp의 정답이 되진 않겠죠.
DAO영역도 마찬가지 입니다. DB자체는 바뀌지 않지만 (10년은 보통 쓰지요..) 비지니스와 아키텍쳐는 바뀌기 마련입니다.

단순 SQL을 적재하는 방식이 될런지, 추후 SQL이 소스에 녹아있는것이 너무 많아져서 복잡도를 줄이려면 XML이든 SQL Mapping 방식이든 파일 분리가 일어날것이고요.
좀 더 지나 ORM 이 도입될지도 모르는 일입니다.
전부다는 아니더라도, 일부 비지니스가 바뀔때 확장, 수정, 변경, 유지보수를 고려한다면 느슨한 결합 형태의 DAO 영역을 가져가는 것이 훨씬 도움이 되는것이겠죠..

하지만 정답은 없다고 봅니다. 그때 그때 규모와 상황에 맞게 선택할 문제입니다.
개발 단계에서 추가 수정의 커버리지가 높을때 그걸 하고 넘어갈지, 개발 이후에 반영할지는 당사자들이 판단해야죠..어차피 비용의 증감과 직결되는 문제일테니깐요..