변수의 종류 => 멤버변수, 지역변수, 파라미터변수, 전역변수, 정적변수, 참조형 변수, 레퍼런스 변수, 객체변수, 클래스변수, 기본형변수, 상수, 원시데이터타입==(프리티브타입),동적변수, 매개변수,아규먼트
**멤버와 메소드는 반드시 주체가있다.**

1)변수
     1>유효범위
          1) 멤버변수 - 객체소속 , 클래스 소속  
                // 전역변수 = 멤버변수   // 정적변수 = 클래스 변수  //동적변수 = 객체변수
          2) 지역변수 - 파라미터 지역변수 , 선언초기화 변수
                  // 파라미터 변수 = 매개변수 = 아규먼트
     2>참조방식
          1) 기본형 변수
               -call by value
               -종류 = byte(1),  ▶short(2) ,▶ int(4),▶ long(8),▶ float(4), ▶  double(8) , char(2) ▶

                              boolean (1)  ==> 불린의 초기값은 JVM이 False로 설정해준다.

                    byte - short - char - int ==자바의 정수형!! 연산을 하게되면 int로 결과값이나온다.

               <<롱(8)과 플롯(4) 플롯이 롱을 포함할 수는 있지만 표현의 범위가 작아진다.>>
               --값의 범위
		    boolean : true, false
		    char : 0~2^16-1 (경우의 수 : 2^8)
                    byte : -2^7 ~ 2^7-1 (경우의 수 : 2^8)
                    short : -2^15 ~ 2^15-1 (경우의 수 : 2^16)
                    int : -2^31 ~ 2^31-1 (경우의 수 : 2^32)
                    long : -2^63 ~ 2^63-1 (경우의 수 : 2^64)
                    float : 
                    double :
                   
                    -형변환 필요한 이유 
                    - 예외 형변환
                         정수형(byte,short,char,int)끼리의 연산은 반드시 그 결과 int
                    - 기본형 8가지가 존재하는 이유 => 실행의 효율성
                         -->>Wrapper 클래스 존재!   (Integer,Long, Character등등 기본형 8가지 존재)

          2) 참조형
               - call by reference
               - 종류 : 무한  (기본형 8가지를 제외한 모든)
                - 형변환  Object◀ Human  ◀ Superman
               -형변환 예
                    Human m = new Superman();
                    SuperMan sm = (SuperMan)m;

          3>소유 주체 (Static 의 유무)  ==>지역변수는 소유가 없다 
               1)객체 (소유) 변수
               2)클래스 (소유) 변수   == 멤버변수나 메소드에 사용

          4>초기값 변경 가능 여부 (final 유무에 따라)
                   1)변수
                    2)상수




   1. 제한자 (modifier)
      1. 정의 : 클래스, 인터페이스 ,변수 ,상수, 메소드, 생성자 앞에붙어서 기능을 제한하는 키워드(예약어)
      2. 종류
         1. ) 접근제한자 ( public )
            1. public : 접근 제한자 // 저장된 파일명과 클래스명이 동일해야됨
            2. protected : 같은 패키지 내에서 또는 다른패키지이어도 상속관계의 부모의 자원
            3. default : 같은 패키지 내에서 
            4. private : 자기가 속해 있는 클래스 내
               1. 접근 범위 기준 = public > protected > default > private
               2. 강력한 범위 기준 = public < protected < default < private  


         2. ) 소유 제한자 ( static )
            1. static이 붙어있으면 클래스 소유가 됨
            2. 멤버와 메소드에만 붙을 수 있음
            3. static 자원은 메모리에 1개만 만들어짐 (클래스와 한몸)
            4. static 메소드에서는 클래스의 주체가 생략됨

         3. ) 수정 제한자 ( final )
            1. 붙으면 수정이 불가함.
            2. 1.클래스 앞에 붙게되면 자식을 생성할 수 없고 // 2.변수앞에 붙으면 초기값 변경불가 // 3.메소드앞에 붙으면 오버라이딩이 안됨 //  4.생성자에는 못붙는다(생성자는 오버라이딩이 안됨)

         4. ) 추상 제한자 ( abstract )   (기능을 추상화 시키는 것 -> 변수와 생성자 앞에는 붙을 수 없다.)
            1. 붙으면 추상화가 됨
            2. abstract를 메소드앞에 붙이면 반드시 자식 클래스에서 오버라이딩을 해줘야 함
            3. {} 바디를 사용할 수없다.  



   2. 식별자(Identifier) = > 개발자가 임의로 만드는 패키지, 클래스, 변수, 메소드 이름 // 즉 식별자의 반대말은   예약어 (JVM에서 )
      1. 규칙
         1. 1) 첫문자가 숫자여서는 안됨
         2. 2) 특수문자 =>>  _와 $만 가능 (첫문자로 써도됨)
         3. 3)길이의 제한은 없

2. 관례
            1. 의미있는 단어
            2.  클래스와 인터페이스 이름은 첫문자를 대문자로 작성
            3. 메소드, 변수, 패키지 이름은 첫문자를 소문자로
            4. 단어와 단어 사이의 결합으로 된 식별자는 다음단어의 첫문자를 대문자로 하거나, _로 연결함
            5. $를 잘 사용안함



